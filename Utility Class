public class Utility {
    public static long setBit(long value, int position) {
        return  (value | (1L << position));
    }

    // method to clear a bit
    public static long clearBit(long value, int position) {
        return value & ~(1L << position);
    }

    // method to toggle a  bit
    public static long toggleBit(int value, int position) {
        return value ^ (1L << position);
    }

    // method to check if a  bit is set
    public static boolean checkBit(long value, int position) {
        return ((value >> position) & 1) == 1;
    }

    // method to flip a bit
    public static long flipBit(int value, int position) {
        return value ^ (1L << position);
    }

    // method to shift left
    public static String shiftLeft(int value, int positions) {
        return toBinaryString(value << positions);
    }

    // method to shift right
    public static String shiftRight(int value, int positions) {
        return toBinaryString(value >> positions);
    }

    // method to create a bitmask
    public static String createBitmask(int start, int end) {
        int mask = ((1 << (end - start + 1)) - 1) << start;
        return toBinaryString(mask);
    }

    // method to convert an int to a binary string
    public static String toBinaryString(long value) {
        return String.format("%32s", Long.toBinaryString(value)).replaceAll(" ", "0");
    }

    // method to convert an int to a hexadecimal string
    public static String toHexString(int value) {
        return Integer.toHexString(value);
    }

    // Binary Arithmetic (addition)
    public static String add(int a, int b) {
        return toBinaryString(a + b);
    }

    // Binary Arithmetic (subtraction)
    public static String subtract(int a, int b) {
        return toBinaryString(a - b);
    }

    // Binary Arithmetic (multiplication)
    public static String multiply(int a, int b) {
        return toBinaryString(a * b);
    }

    // Binary Arithmetic (division)
    public static String divide(int a, int b) {
        if (b == 0) {
            throw new ArithmeticException("Division by zero");
        }
        return toBinaryString(a / b);
    }

}

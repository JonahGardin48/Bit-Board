import java.util.Scanner;

public class Bitboard {
    private long player1Board;
    private long player2Board;

    public Bitboard() {
        initializeBoard();
    }
    public void initializeBoard() {
        player1Board =  0x0000000000AA55AAL;
        // Rows 6-8 (12 pieces)
        player2Board = 0x55AA550000000000L;
        // Rows 1-3 (12 pieces)
    }

    // Move a piece  (index from 0 to 63)
    public void movePiece(int start, int end, int currentPlayer) {
        long currentBoard = (currentPlayer == 1) ? player1Board : player2Board;

        if (!isLegalMove(start, end, currentPlayer)) {
            System.out.println("Illegal move!");
            return;
        }

        // Clear where the piece begins, and set it to where it ends
        currentBoard = Utility.clearBit(currentBoard, start);
        currentBoard = Utility.setBit(currentBoard, end);

        // Change player
        if (currentPlayer == 1) {
            player1Board = currentBoard;
        } else {
            player2Board = currentBoard;
        }
        // I implemented the capture piece into the move for better fluidity in gameplay
        int rowDifference = Math.abs(start / 8 - end / 8);
        if (rowDifference == 2) {
            int capturedPosition = (start + end) / 2;
            capturePiece(capturedPosition, currentPlayer);
        }

    }

    // Check if a move is legal (basic boundary and empty space check)
    public boolean isLegalMove(int start, int end, int currentPlayer) {

        // Used to make sure which turn it is using a ternary expression for simplification
        long currentBoard = (currentPlayer == 1) ? player1Board : player2Board;
        long opponentBoard = (currentPlayer == 1) ? player2Board : player1Board;

        // Ensure end position is empty
        boolean isEndEmpty = !Utility.checkBit(currentBoard, end) && !Utility.checkBit(opponentBoard, end);
        if (!isEndEmpty) {
            return false;
        }

        // This checks if the move is in bounds and in the correct place
        int rowDifference = Math.abs(start / 8 - end / 8);
        int colDifference = Math.abs(start % 8 - end % 8);

        return (rowDifference == 1 && colDifference == 1) || (rowDifference == 2 && colDifference == 2);
    }

    // Method to remove a piece after a jump
    public void capturePiece(int position, int currentPlayer) {
        if (currentPlayer == 1) {
            player2Board = (Utility.clearBit(player2Board, position));  // Remove from Player 2's board
        } else {
            player1Board = (Utility.clearBit(player1Board, position));  // Remove from Player 1's board
        }
    }

    // Board print function
    public void printBoard() {
        //Using R and B for piece names
        System.out.println("Current Board:");
        for (int i = 0; i < 64; i++) {
            if (i % 8 == 0) System.out.println();
            if (Utility.checkBit(player1Board, i)) {
                System.out.print("B  ");
            } else if (Utility.checkBit(player2Board, i)) {
                System.out.print("R  ");
            } else {
                System.out.print(".  ");
            }
        }
        System.out.println();
    }

    // Update the game state after each move
    public boolean updateGameState(int currentPlayer) {
        // Check if either player has any pieces left
        if (currentPlayer == 1 && player1Board == 0) {
            System.out.println("Player 2 wins!");
            return true;
        }
        if (currentPlayer == 2 && player2Board == 0) {
            System.out.println("Player 1 wins!");
            return true;
        }
        return false;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Bitboard bitboard = new Bitboard();
        int currentPlayer = 1;

        System.out.println("Welcome to Checkers!");
        bitboard.printBoard();

        // Simple menu so that the game can be played with the scanner
        boolean gameOver = false;
        while (!gameOver) {
            System.out.println("Player " + currentPlayer + "'s turn.");

            System.out.print("Enter the start position (0-63): ");
            int start = scanner.nextInt();
            System.out.print("Enter the end position (0-63): ");
            int end = scanner.nextInt();

            bitboard.movePiece(start, end, currentPlayer);

            // Print the updated board
            bitboard.printBoard();

            // Check if the game is over
            gameOver = bitboard.updateGameState(currentPlayer);

            // Switch to the other player if not over
            if (!gameOver) {
                currentPlayer = (currentPlayer == 1) ? 2 : 1;
            }
        }

        System.out.println("Game Over!");
        scanner.close();
    }
}
